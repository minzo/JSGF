//==============================================================================
//
//  物理コンポーネント [RigidBodyComponent.js]
//
//==============================================================================

(function( window, undefined ) {

//------------------------------------------------------------------------------
// RigidBodyComponent
//------------------------------------------------------------------------------
RigidBodyComponent = class extends Component
{
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    constructor()
    {
        super();

        this.transform = new Transform();

        this.mass = 1.0;
        this.centerOfGravity = new VEC3( 0.0, 0.0, 0.0 );

        this.acc = new VEC3( 0.0, 0.0, 0.0 ); // acceleration
        this.vel = new VEC3( 0.0, 0.0, 0.0 ); // velocity

        this.gravity = new VEC3( 0.0, 0.1, 0.0 );

        this.collision = null;
    }


    //--------------------------------------------------------------------------
    // 力
    //--------------------------------------------------------------------------
    addAcc( acc ) { this.acc.add( acc ); }
    addForce( force ) { this.acc.add( force / this.mass ); }


    //--------------------------------------------------------------------------
    // 計算処理 - Component は calc() が必ず呼ばれます
    // @param owner このコンポーネントをアタッチしているオブジェクト
    //--------------------------------------------------------------------------
    calc( owner )
    {
        super.calc( owner );
        gPhysMngr.entry( this );
    }

    //--------------------------------------------------------------------------
    // 前処理
    //--------------------------------------------------------------------------
    preproc()
    {
        // owner object に座標追従
        this.transform.setParent( this.owner.transform );
        this.transform.resetUpdateFlag();
        this.transform.calc();

        // collision も座標追従
        if( this.collision )
        {
            this.collision.calc( this );
        }

        // 重力
        this.acc.add( this.gravity );

        // 速度計算
        this.vel.add( this.acc );
    }


    //--------------------------------------------------------------------------
    // 処理
    //--------------------------------------------------------------------------
    proc()
    {
        // 移動計算
        this.owner.transform.pos.add( this.vel );
    }

    //--------------------------------------------------------------------------
    // 後処理
    //--------------------------------------------------------------------------
    postproc()
    {
        // 加速度リセット
        this.acc.setZero();
    }

    isHit( rigidbody )
    {
        // 衝突判定
        return false;
    }
};


//------------------------------------------------------------------------------
// RigidBodyCircle
//------------------------------------------------------------------------------
RigidBodyCircle = class extends RigidBodyComponent
{
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    constructor()
    {
        super();
        this.collision = new Col2dCircle( 1.0 );
    }
}

})( window );